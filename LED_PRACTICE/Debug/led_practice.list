
led_practice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000358  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004ec  080004f4  000104f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004ec  080004ec  000104f4  2**0
                  CONTENTS
  4 .ARM          00000000  080004ec  080004ec  000104f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004ec  080004f4  000104f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004ec  080004ec  000104ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004f0  080004f0  000104f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080004f4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080004f4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000104f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000508  00000000  00000000  00010524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000f7  00000000  00000000  00010a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  00010b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  00010b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000db2b  00000000  00000000  00010be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000060b  00000000  00000000  0001e70b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004f41b  00000000  00000000  0001ed16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0006e131  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000dc  00000000  00000000  0006e184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004d4 	.word	0x080004d4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080004d4 	.word	0x080004d4

080001d4 <main>:
void initTIM2(void);
void initTIM3(void);
void initGPIO(void);

int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
    SystemInit();
 80001da:	f000 f823 	bl	8000224 <SystemInit>

    initGPIO();
 80001de:	f000 f8e7 	bl	80003b0 <initGPIO>
    initTIM2();
 80001e2:	f000 f863 	bl	80002ac <initTIM2>
    initTIM3();
 80001e6:	f000 f8a5 	bl	8000334 <initTIM3>

    while (1)
    {
        // Toggle PA0 (LED connected to TIM2_CH1)
        GPIOA->ODR ^= GPIO_ODR_OD0; // Toggle PA0
 80001ea:	4b0b      	ldr	r3, [pc, #44]	; (8000218 <main+0x44>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <main+0x44>)
 80001f0:	f083 0301 	eor.w	r3, r3, #1
 80001f4:	6153      	str	r3, [r2, #20]

        // Toggle PB1 (LED connected to TIM3_CH4)
        GPIOB->ODR ^= GPIO_ODR_OD1; // Toggle PB1
 80001f6:	4b09      	ldr	r3, [pc, #36]	; (800021c <main+0x48>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	4a08      	ldr	r2, [pc, #32]	; (800021c <main+0x48>)
 80001fc:	f083 0302 	eor.w	r3, r3, #2
 8000200:	6153      	str	r3, [r2, #20]

        // Wait for 500 ms (half-period)
        for (volatile int i = 0; i < 500000; ++i)
 8000202:	2300      	movs	r3, #0
 8000204:	607b      	str	r3, [r7, #4]
 8000206:	e002      	b.n	800020e <main+0x3a>
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	3301      	adds	r3, #1
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	4a03      	ldr	r2, [pc, #12]	; (8000220 <main+0x4c>)
 8000212:	4293      	cmp	r3, r2
 8000214:	ddf8      	ble.n	8000208 <main+0x34>
        GPIOA->ODR ^= GPIO_ODR_OD0; // Toggle PA0
 8000216:	e7e8      	b.n	80001ea <main+0x16>
 8000218:	40020000 	.word	0x40020000
 800021c:	40020400 	.word	0x40020400
 8000220:	0007a11f 	.word	0x0007a11f

08000224 <SystemInit>:
        }
    }
}

void SystemInit(void)
{
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
    // Set up the system.
    // Reset the RCC clock configuration to the default reset state.
    RCC->CR |= RCC_CR_HSION;                    // Enable HSI
 8000228:	4b1e      	ldr	r3, [pc, #120]	; (80002a4 <SystemInit+0x80>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a1d      	ldr	r2, [pc, #116]	; (80002a4 <SystemInit+0x80>)
 800022e:	f043 0301 	orr.w	r3, r3, #1
 8000232:	6013      	str	r3, [r2, #0]
    RCC->CFGR &= ~RCC_CFGR_SW;                  // Reset SW bits
 8000234:	4b1b      	ldr	r3, [pc, #108]	; (80002a4 <SystemInit+0x80>)
 8000236:	689b      	ldr	r3, [r3, #8]
 8000238:	4a1a      	ldr	r2, [pc, #104]	; (80002a4 <SystemInit+0x80>)
 800023a:	f023 0303 	bic.w	r3, r3, #3
 800023e:	6093      	str	r3, [r2, #8]
    RCC->CR &= ~RCC_CR_PLLON;                   // Disable PLL
 8000240:	4b18      	ldr	r3, [pc, #96]	; (80002a4 <SystemInit+0x80>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a17      	ldr	r2, [pc, #92]	; (80002a4 <SystemInit+0x80>)
 8000246:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800024a:	6013      	str	r3, [r2, #0]
    while ((RCC->CR & RCC_CR_PLLRDY) != 0) {}  // Wait until PLL is disabled
 800024c:	bf00      	nop
 800024e:	4b15      	ldr	r3, [pc, #84]	; (80002a4 <SystemInit+0x80>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000256:	2b00      	cmp	r3, #0
 8000258:	d1f9      	bne.n	800024e <SystemInit+0x2a>
    RCC->CR &= ~RCC_CR_HSEON;                   // Disable HSE
 800025a:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <SystemInit+0x80>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4a11      	ldr	r2, [pc, #68]	; (80002a4 <SystemInit+0x80>)
 8000260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000264:	6013      	str	r3, [r2, #0]
    while ((RCC->CR & RCC_CR_HSERDY) != 0) {}  // Wait until HSE is disabled
 8000266:	bf00      	nop
 8000268:	4b0e      	ldr	r3, [pc, #56]	; (80002a4 <SystemInit+0x80>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000270:	2b00      	cmp	r3, #0
 8000272:	d1f9      	bne.n	8000268 <SystemInit+0x44>
    RCC->CR &= ~RCC_CR_CSSON;                   // Disable CSS
 8000274:	4b0b      	ldr	r3, [pc, #44]	; (80002a4 <SystemInit+0x80>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a0a      	ldr	r2, [pc, #40]	; (80002a4 <SystemInit+0x80>)
 800027a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800027e:	6013      	str	r3, [r2, #0]
    RCC->PLLCFGR = 0x24003010;                  // Reset PLLCFGR register
 8000280:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <SystemInit+0x80>)
 8000282:	4a09      	ldr	r2, [pc, #36]	; (80002a8 <SystemInit+0x84>)
 8000284:	605a      	str	r2, [r3, #4]
    RCC->CR &= ~RCC_CR_HSEBYP;                  // Reset HSEBYP bit
 8000286:	4b07      	ldr	r3, [pc, #28]	; (80002a4 <SystemInit+0x80>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a06      	ldr	r2, [pc, #24]	; (80002a4 <SystemInit+0x80>)
 800028c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000290:	6013      	str	r3, [r2, #0]
    RCC->CIR = 0x00000000;                      // Disable all interrupts and clear pending bits
 8000292:	4b04      	ldr	r3, [pc, #16]	; (80002a4 <SystemInit+0x80>)
 8000294:	2200      	movs	r2, #0
 8000296:	60da      	str	r2, [r3, #12]
}
 8000298:	bf00      	nop
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	40023800 	.word	0x40023800
 80002a8:	24003010 	.word	0x24003010

080002ac <initTIM2>:

void initTIM2(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
    // Enable TIM2 clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80002b0:	4b1f      	ldr	r3, [pc, #124]	; (8000330 <initTIM2+0x84>)
 80002b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002b4:	4a1e      	ldr	r2, [pc, #120]	; (8000330 <initTIM2+0x84>)
 80002b6:	f043 0301 	orr.w	r3, r3, #1
 80002ba:	6413      	str	r3, [r2, #64]	; 0x40

    // Configure TIM2
    TIM2->CR1 &= ~TIM_CR1_CEN;  // Disable TIM2
 80002bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002c6:	f023 0301 	bic.w	r3, r3, #1
 80002ca:	6013      	str	r3, [r2, #0]
    TIM2->PSC = 83;             // Prescaler, so the timer counts every 1 us (84 MHz / (83 + 1) = 1 MHz)
 80002cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002d0:	2253      	movs	r2, #83	; 0x53
 80002d2:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 8399;           // Auto-reload value, gives a period of 8.4 ms (1 MHz * (8399 + 1) = 8.4 ms)
 80002d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002d8:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80002dc:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CCMR1 = 0x60;         // PWM mode 1 on channel 1
 80002de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002e2:	2260      	movs	r2, #96	; 0x60
 80002e4:	619a      	str	r2, [r3, #24]
    TIM2->CCMR1 |= TIM_CCMR1_OC1PE;  // Enable preload register on channel 1
 80002e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002f0:	f043 0308 	orr.w	r3, r3, #8
 80002f4:	6193      	str	r3, [r2, #24]
    TIM2->CCER |= TIM_CCER_CC1E;     // Enable capture/compare channel 1
 80002f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002fa:	6a1b      	ldr	r3, [r3, #32]
 80002fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000300:	f043 0301 	orr.w	r3, r3, #1
 8000304:	6213      	str	r3, [r2, #32]
    TIM2->CR1 |= TIM_CR1_ARPE;       // Enable auto-reload preload
 8000306:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000314:	6013      	str	r3, [r2, #0]
    TIM2->CR1 |= TIM_CR1_CEN;        // Enable TIM2
 8000316:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000320:	f043 0301 	orr.w	r3, r3, #1
 8000324:	6013      	str	r3, [r2, #0]
}
 8000326:	bf00      	nop
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	40023800 	.word	0x40023800

08000334 <initTIM3>:

void initTIM3(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
    // Enable TIM3 clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <initTIM3+0x74>)
 800033a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800033c:	4a1a      	ldr	r2, [pc, #104]	; (80003a8 <initTIM3+0x74>)
 800033e:	f043 0302 	orr.w	r3, r3, #2
 8000342:	6413      	str	r3, [r2, #64]	; 0x40

    // Configure TIM3
    TIM3->CR1 &= ~TIM_CR1_CEN;  // Disable TIM3
 8000344:	4b19      	ldr	r3, [pc, #100]	; (80003ac <initTIM3+0x78>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a18      	ldr	r2, [pc, #96]	; (80003ac <initTIM3+0x78>)
 800034a:	f023 0301 	bic.w	r3, r3, #1
 800034e:	6013      	str	r3, [r2, #0]
    TIM3->PSC = 83;             // Prescaler, so the timer counts every 1 us (84 MHz / (83 + 1) = 1 MHz)
 8000350:	4b16      	ldr	r3, [pc, #88]	; (80003ac <initTIM3+0x78>)
 8000352:	2253      	movs	r2, #83	; 0x53
 8000354:	629a      	str	r2, [r3, #40]	; 0x28
    TIM3->ARR = 8399;           // Auto-reload value, gives a period of 8.4 ms (1 MHz * (8399 + 1) = 8.4 ms)
 8000356:	4b15      	ldr	r3, [pc, #84]	; (80003ac <initTIM3+0x78>)
 8000358:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800035c:	62da      	str	r2, [r3, #44]	; 0x2c

    // Configure for 50% duty cycle (half the period)
    TIM3->CCR4 = 4199;  // Half of the auto-reload value
 800035e:	4b13      	ldr	r3, [pc, #76]	; (80003ac <initTIM3+0x78>)
 8000360:	f241 0267 	movw	r2, #4199	; 0x1067
 8000364:	641a      	str	r2, [r3, #64]	; 0x40

    TIM3->CCMR2 = 0x60;         // PWM mode 1 on channel 4
 8000366:	4b11      	ldr	r3, [pc, #68]	; (80003ac <initTIM3+0x78>)
 8000368:	2260      	movs	r2, #96	; 0x60
 800036a:	61da      	str	r2, [r3, #28]
    TIM3->CCMR2 |= TIM_CCMR2_OC4PE;  // Enable preload register on channel 4
 800036c:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <initTIM3+0x78>)
 800036e:	69db      	ldr	r3, [r3, #28]
 8000370:	4a0e      	ldr	r2, [pc, #56]	; (80003ac <initTIM3+0x78>)
 8000372:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000376:	61d3      	str	r3, [r2, #28]
    TIM3->CCER |= TIM_CCER_CC4E;     // Enable capture/compare channel 4
 8000378:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <initTIM3+0x78>)
 800037a:	6a1b      	ldr	r3, [r3, #32]
 800037c:	4a0b      	ldr	r2, [pc, #44]	; (80003ac <initTIM3+0x78>)
 800037e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000382:	6213      	str	r3, [r2, #32]
    TIM3->CR1 |= TIM_CR1_ARPE;       // Enable auto-reload preload
 8000384:	4b09      	ldr	r3, [pc, #36]	; (80003ac <initTIM3+0x78>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a08      	ldr	r2, [pc, #32]	; (80003ac <initTIM3+0x78>)
 800038a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800038e:	6013      	str	r3, [r2, #0]
    TIM3->CR1 |= TIM_CR1_CEN;        // Enable TIM3
 8000390:	4b06      	ldr	r3, [pc, #24]	; (80003ac <initTIM3+0x78>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a05      	ldr	r2, [pc, #20]	; (80003ac <initTIM3+0x78>)
 8000396:	f043 0301 	orr.w	r3, r3, #1
 800039a:	6013      	str	r3, [r2, #0]
}
 800039c:	bf00      	nop
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	40023800 	.word	0x40023800
 80003ac:	40000400 	.word	0x40000400

080003b0 <initGPIO>:

void initGPIO(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
    // Enable GPIOA and GPIOB clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN;
 80003b4:	4b1d      	ldr	r3, [pc, #116]	; (800042c <initGPIO+0x7c>)
 80003b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b8:	4a1c      	ldr	r2, [pc, #112]	; (800042c <initGPIO+0x7c>)
 80003ba:	f043 0303 	orr.w	r3, r3, #3
 80003be:	6313      	str	r3, [r2, #48]	; 0x30

    // Configure PA0 (TIM2_CH1) and PB1 (TIM3_CH4) as alternate function
    GPIOA->MODER &= ~GPIO_MODER_MODER0;  // Clear mode bits for PA0
 80003c0:	4b1b      	ldr	r3, [pc, #108]	; (8000430 <initGPIO+0x80>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a1a      	ldr	r2, [pc, #104]	; (8000430 <initGPIO+0x80>)
 80003c6:	f023 0303 	bic.w	r3, r3, #3
 80003ca:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= GPIO_MODER_MODER0_1; // Set mode bits to alternate function for PA0
 80003cc:	4b18      	ldr	r3, [pc, #96]	; (8000430 <initGPIO+0x80>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a17      	ldr	r2, [pc, #92]	; (8000430 <initGPIO+0x80>)
 80003d2:	f043 0302 	orr.w	r3, r3, #2
 80003d6:	6013      	str	r3, [r2, #0]

    GPIOB->MODER &= ~GPIO_MODER_MODER1;  // Clear mode bits for PB1
 80003d8:	4b16      	ldr	r3, [pc, #88]	; (8000434 <initGPIO+0x84>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a15      	ldr	r2, [pc, #84]	; (8000434 <initGPIO+0x84>)
 80003de:	f023 030c 	bic.w	r3, r3, #12
 80003e2:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= GPIO_MODER_MODER1_1; // Set mode bits to alternate function for PB1
 80003e4:	4b13      	ldr	r3, [pc, #76]	; (8000434 <initGPIO+0x84>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a12      	ldr	r2, [pc, #72]	; (8000434 <initGPIO+0x84>)
 80003ea:	f043 0308 	orr.w	r3, r3, #8
 80003ee:	6013      	str	r3, [r2, #0]

    // Configure alternate function for PA0 (TIM2_CH1) and PB1 (TIM3_CH4)
    GPIOA->AFR[0] &= ~GPIO_AFRL_AFSEL0;   // Clear alternate function bits for PA0
 80003f0:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <initGPIO+0x80>)
 80003f2:	6a1b      	ldr	r3, [r3, #32]
 80003f4:	4a0e      	ldr	r2, [pc, #56]	; (8000430 <initGPIO+0x80>)
 80003f6:	f023 030f 	bic.w	r3, r3, #15
 80003fa:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= GPIO_AFRL_AFSEL0_1;  // Set alternate function bits for PA0
 80003fc:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <initGPIO+0x80>)
 80003fe:	6a1b      	ldr	r3, [r3, #32]
 8000400:	4a0b      	ldr	r2, [pc, #44]	; (8000430 <initGPIO+0x80>)
 8000402:	f043 0302 	orr.w	r3, r3, #2
 8000406:	6213      	str	r3, [r2, #32]

    GPIOB->AFR[0] &= ~GPIO_AFRL_AFSEL1;   // Clear alternate function bits for PB1
 8000408:	4b0a      	ldr	r3, [pc, #40]	; (8000434 <initGPIO+0x84>)
 800040a:	6a1b      	ldr	r3, [r3, #32]
 800040c:	4a09      	ldr	r2, [pc, #36]	; (8000434 <initGPIO+0x84>)
 800040e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000412:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= GPIO_AFRL_AFSEL1_1;  // Set alternate function bits for PB1
 8000414:	4b07      	ldr	r3, [pc, #28]	; (8000434 <initGPIO+0x84>)
 8000416:	6a1b      	ldr	r3, [r3, #32]
 8000418:	4a06      	ldr	r2, [pc, #24]	; (8000434 <initGPIO+0x84>)
 800041a:	f043 0320 	orr.w	r3, r3, #32
 800041e:	6213      	str	r3, [r2, #32]
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	40023800 	.word	0x40023800
 8000430:	40020000 	.word	0x40020000
 8000434:	40020400 	.word	0x40020400

08000438 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000438:	480d      	ldr	r0, [pc, #52]	; (8000470 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800043a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800043c:	f7ff fef2 	bl	8000224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000440:	480c      	ldr	r0, [pc, #48]	; (8000474 <LoopForever+0x6>)
  ldr r1, =_edata
 8000442:	490d      	ldr	r1, [pc, #52]	; (8000478 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000444:	4a0d      	ldr	r2, [pc, #52]	; (800047c <LoopForever+0xe>)
  movs r3, #0
 8000446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000448:	e002      	b.n	8000450 <LoopCopyDataInit>

0800044a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800044a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800044c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800044e:	3304      	adds	r3, #4

08000450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000454:	d3f9      	bcc.n	800044a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000456:	4a0a      	ldr	r2, [pc, #40]	; (8000480 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000458:	4c0a      	ldr	r4, [pc, #40]	; (8000484 <LoopForever+0x16>)
  movs r3, #0
 800045a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800045c:	e001      	b.n	8000462 <LoopFillZerobss>

0800045e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800045e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000460:	3204      	adds	r2, #4

08000462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000464:	d3fb      	bcc.n	800045e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000466:	f000 f811 	bl	800048c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800046a:	f7ff feb3 	bl	80001d4 <main>

0800046e <LoopForever>:

LoopForever:
  b LoopForever
 800046e:	e7fe      	b.n	800046e <LoopForever>
  ldr   r0, =_estack
 8000470:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000478:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800047c:	080004f4 	.word	0x080004f4
  ldr r2, =_sbss
 8000480:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000484:	2000001c 	.word	0x2000001c

08000488 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000488:	e7fe      	b.n	8000488 <ADC_IRQHandler>
	...

0800048c <__libc_init_array>:
 800048c:	b570      	push	{r4, r5, r6, lr}
 800048e:	4d0d      	ldr	r5, [pc, #52]	; (80004c4 <__libc_init_array+0x38>)
 8000490:	4c0d      	ldr	r4, [pc, #52]	; (80004c8 <__libc_init_array+0x3c>)
 8000492:	1b64      	subs	r4, r4, r5
 8000494:	10a4      	asrs	r4, r4, #2
 8000496:	2600      	movs	r6, #0
 8000498:	42a6      	cmp	r6, r4
 800049a:	d109      	bne.n	80004b0 <__libc_init_array+0x24>
 800049c:	4d0b      	ldr	r5, [pc, #44]	; (80004cc <__libc_init_array+0x40>)
 800049e:	4c0c      	ldr	r4, [pc, #48]	; (80004d0 <__libc_init_array+0x44>)
 80004a0:	f000 f818 	bl	80004d4 <_init>
 80004a4:	1b64      	subs	r4, r4, r5
 80004a6:	10a4      	asrs	r4, r4, #2
 80004a8:	2600      	movs	r6, #0
 80004aa:	42a6      	cmp	r6, r4
 80004ac:	d105      	bne.n	80004ba <__libc_init_array+0x2e>
 80004ae:	bd70      	pop	{r4, r5, r6, pc}
 80004b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80004b4:	4798      	blx	r3
 80004b6:	3601      	adds	r6, #1
 80004b8:	e7ee      	b.n	8000498 <__libc_init_array+0xc>
 80004ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80004be:	4798      	blx	r3
 80004c0:	3601      	adds	r6, #1
 80004c2:	e7f2      	b.n	80004aa <__libc_init_array+0x1e>
 80004c4:	080004ec 	.word	0x080004ec
 80004c8:	080004ec 	.word	0x080004ec
 80004cc:	080004ec 	.word	0x080004ec
 80004d0:	080004f0 	.word	0x080004f0

080004d4 <_init>:
 80004d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004d6:	bf00      	nop
 80004d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004da:	bc08      	pop	{r3}
 80004dc:	469e      	mov	lr, r3
 80004de:	4770      	bx	lr

080004e0 <_fini>:
 80004e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004e2:	bf00      	nop
 80004e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004e6:	bc08      	pop	{r3}
 80004e8:	469e      	mov	lr, r3
 80004ea:	4770      	bx	lr
